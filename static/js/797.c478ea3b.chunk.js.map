{"version":3,"file":"static/js/797.c478ea3b.chunk.js","mappings":"mQAIe,SAASA,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAO/BC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,6GAE+BC,EAAAA,GAAiBH,GAFhD,OAEUI,EAFV,OAGIC,EAAaD,GAHjB,gDAKIE,QAAQC,IAAR,MALJ,0DALc,sBACA,KAAVP,GAYAA,GAbU,mCAcZQ,KAED,CAACR,IAEJ,IAAMK,EAAe,SAAAD,GACnB,IAAMK,EAAoBL,EAAaM,QAAQC,KAC7C,kBAA6B,CAC3BC,GADF,EAAGA,GAEDC,eAFF,EAAOA,mBAKTjB,EAAUa,IAGZ,OACE,iCACE,kBAAMK,SAnCV,SAAsBC,GACpBA,EAAMC,iBACNjB,EAAgB,CAAEC,MAAOe,EAAME,OAAOC,SAASlB,MAAMmB,SAiCnD,WACE,kBAAOC,KAAK,QAAQC,KAAK,OAAOC,aAAa,MAAMC,WAAS,KAC5D,mBAAQF,KAAK,SAAb,uBAED1B,IACC,wBACGA,EAAOgB,KAAI,SAAAa,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAMZ,IAA3B,SAAkCY,EAAMX,kBADjCW,EAAMZ,c,yMCjD3Bc,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,oGACRD,IAAAA,IAAA,gEADQ,cACzBE,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qDAOjBzB,EAAY,mCAAG,WAAMJ,GAAN,uFACH0B,IAAAA,IAAA,uEAC2C1B,IAFxC,cACpB4B,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZC,EAAe,mCAAG,WAAMC,GAAN,uFACNL,IAAAA,IAAA,iBACXK,EADW,8CADM,cACvBH,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfG,EAAc,mCAAG,WAAMD,GAAN,uFACLL,IAAAA,IAAA,iBACXK,EADW,sDADK,cACtBH,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdI,EAAgB,mCAAG,WAAMF,GAAN,uFACPL,IAAAA,IAAA,iBACXK,EADW,sDADO,cACxBH,EADwB,yBAIvBA,EAASC,MAJc,2CAAH","sources":["pages/MoviesPage.jsx","services/api.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport * as API from 'services/api';\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setSearchParams({ query: event.target.elements.query.value });\n  }\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    async function fetchSearchMovies() {\n      try {\n        const searchMovies = await API.searchMovies(query);\n        searchResult(searchMovies);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    if (query) {\n      fetchSearchMovies();\n    }\n  }, [query]);\n\n  const searchResult = searchMovies => {\n    const searchMoviesArray = searchMovies.results.map(\n      ({ id, original_title }) => ({\n        id,\n        original_title,\n      })\n    );\n    setMovies(searchMoviesArray);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input name=\"query\" type=\"text\" autoComplete=\"off\" autoFocus />\n        <button type=\"submit\">Search</button>\n      </form>\n      {movies && (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`}>{movie.original_title}</Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=be62f5641064cac309cf00d464856dbe`\n  );\n  return response.data;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=be62f5641064cac309cf00d464856dbe&query=${query}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=be62f5641064cac309cf00d464856dbe`\n  );\n  return response.data;\n};\n\nexport const getActorsMovie = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=be62f5641064cac309cf00d464856dbe`\n  );\n  return response.data;\n};\n\nexport const getMoviesReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=be62f5641064cac309cf00d464856dbe`\n  );\n  return response.data;\n};\n"],"names":["MoviesPage","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","API","searchMovies","searchResult","console","log","fetchSearchMovies","searchMoviesArray","results","map","id","original_title","onSubmit","event","preventDefault","target","elements","value","name","type","autoComplete","autoFocus","movie","to","axios","getTrandingMovies","response","data","getMovieDetails","movieId","getActorsMovie","getMoviesReviews"],"sourceRoot":""}