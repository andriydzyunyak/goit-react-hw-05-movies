{"version":3,"file":"static/js/686.7462860b.chunk.js","mappings":"mRAEaA,EAAwBC,EAAAA,EAAAA,IAAH,wEAKrBC,EAAkBD,EAAAA,EAAAA,GAAH,+EAMfE,EAAeF,EAAAA,EAAAA,EAAH,yF,SCNZG,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OACE,SAACL,EAAD,UACsB,IAAnBK,EAAQC,QACP,sEAEA,wBACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,UAACN,EAAD,YACE,UAACC,EAAD,sBAAuBK,EAAOC,WAC9B,uBAAID,EAAOE,YAFSF,EAAOG,YCV1B,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOV,EAAP,KAAgBW,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAE+BC,EAAAA,GAAqBL,GAFpD,OAEUM,EAFV,OAGIC,EAAOD,GAHX,gDAKIE,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,KACC,CAACV,IAEJ,IAAMO,EAAS,SAAAD,GACb,IAAMK,EAAeL,EAAaM,QAAQlB,KACxC,kBAA8B,CAC5BI,GADF,EAAGA,GAEDF,OAFF,EAAOA,OAGLC,QAHF,EAAeA,YAMjBM,EAAWQ,IAGb,OAAO,8BAAGnB,IAAW,SAACD,EAAD,CAAcC,QAASA,Q,yMC9B9CqB,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,oGACRD,IAAAA,IAAA,gEADQ,cACzBE,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qDAOjBC,EAAY,mCAAG,WAAMC,GAAN,uFACHL,IAAAA,IAAA,uEAC2CK,IAFxC,cACpBH,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZG,EAAe,mCAAG,WAAMnB,GAAN,uFACNa,IAAAA,IAAA,iBACXb,EADW,8CADM,cACvBe,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfI,EAAc,mCAAG,WAAMpB,GAAN,uFACLa,IAAAA,IAAA,iBACXb,EADW,sDADK,cACtBe,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdK,EAAgB,mCAAG,WAAMrB,GAAN,uFACPa,IAAAA,IAAA,iBACXb,EADW,sDADO,cACxBe,EADwB,yBAIvBA,EAASC,MAJc,2CAAH","sources":["components/MovieReviews/MovieReviews.styled.jsx","components/MovieReviews/MovieReviews.jsx","pages/Reviews.jsx","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MovieReviewsContainer = styled.div`\n  display: inline-block;\n  margin-left: 35px;\n`;\n\nexport const MovieReviewItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const AuthorReview = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n  margin-bottom: 20px;\n`;\n","import {\n  MovieReviewsContainer,\n  AuthorReview,\n  MovieReviewItem,\n} from 'components/MovieReviews/MovieReviews.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieReviews = ({ reviews }) => {\n  return (\n    <MovieReviewsContainer>\n      {reviews.length === 0 ? (\n        <p>We don't have any reviews for this movie.</p>\n      ) : (\n        <ul>\n          {reviews.map(review => (\n            <MovieReviewItem key={review.id}>\n              <AuthorReview>Author: {review.author}</AuthorReview>\n              <p>{review.content}</p>\n            </MovieReviewItem>\n          ))}\n        </ul>\n      )}\n    </MovieReviewsContainer>\n  );\n};\n\nMovieReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'services/api';\nimport { MovieReviews } from 'components/MovieReviews/MovieReviews';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    async function fetchReviewsMovie() {\n      try {\n        const movieReviews = await API.getMoviesReviews(movieId);\n        Result(movieReviews);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchReviewsMovie();\n  }, [movieId]);\n\n  const Result = movieReviews => {\n    const reviewsArray = movieReviews.results.map(\n      ({ id, author, content }) => ({\n        id,\n        author,\n        content,\n      })\n    );\n    setReviews(reviewsArray);\n  };\n\n  return <>{reviews && <MovieReviews reviews={reviews} />}</>;\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=be62f5641064cac309cf00d464856dbe`\n  );\n  return response.data;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=be62f5641064cac309cf00d464856dbe&query=${query}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=be62f5641064cac309cf00d464856dbe`\n  );\n  return response.data;\n};\n\nexport const getActorsMovie = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=be62f5641064cac309cf00d464856dbe`\n  );\n  return response.data;\n};\n\nexport const getMoviesReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=be62f5641064cac309cf00d464856dbe`\n  );\n  return response.data;\n};\n"],"names":["MovieReviewsContainer","styled","MovieReviewItem","AuthorReview","MovieReviews","reviews","length","map","review","author","content","id","Reviews","movieId","useParams","useState","setReviews","useEffect","API","movieReviews","Result","console","log","fetchReviewsMovie","reviewsArray","results","axios","getTrandingMovies","response","data","searchMovies","query","getMovieDetails","getActorsMovie","getMoviesReviews"],"sourceRoot":""}